<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fm.dao.CustLoginDao">
  <resultMap id="BaseResultMap" type="com.fm.entity.CustLogin">
    <id column="login_id" jdbcType="INTEGER" property="loginId" />
    <result column="cust_id" jdbcType="INTEGER" property="custId" />
    <result column="login_type" jdbcType="INTEGER" property="loginType" />
    <result column="login_time" jdbcType="TIMESTAMP" property="loginTime" />
    <result column="login_out" jdbcType="TIMESTAMP" property="loginOut" />
    <result column="login_ip" jdbcType="VARCHAR" property="loginIp" />
    <result column="login_status" jdbcType="INTEGER" property="loginStatus" />
    <result column="blank_1" jdbcType="VARCHAR" property="blank1" />
    <result column="blank_2" jdbcType="VARCHAR" property="blank2" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    login_id, cust_id, login_type, login_time, login_out, login_ip, login_status, blank_1, 
    blank_2
  </sql>
  <select id="selectByExample" parameterType="com.fm.entity.CustLoginExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from cust_login
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from cust_login
    where login_id = #{loginId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from cust_login
    where login_id = #{loginId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.fm.entity.CustLoginExample">
    delete from cust_login
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.fm.entity.CustLogin">
    insert into cust_login (login_id, cust_id, login_type, 
      login_time, login_out, login_ip, 
      login_status, blank_1, blank_2
      )
    values (#{loginId,jdbcType=INTEGER}, #{custId,jdbcType=INTEGER}, #{loginType,jdbcType=INTEGER}, 
      #{loginTime,jdbcType=TIMESTAMP}, #{loginOut,jdbcType=TIMESTAMP}, #{loginIp,jdbcType=VARCHAR}, 
      #{loginStatus,jdbcType=INTEGER}, #{blank1,jdbcType=VARCHAR}, #{blank2,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.fm.entity.CustLogin">
    insert into cust_login
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="loginId != null">
        login_id,
      </if>
      <if test="custId != null">
        cust_id,
      </if>
      <if test="loginType != null">
        login_type,
      </if>
      <if test="loginTime != null">
        login_time,
      </if>
      <if test="loginOut != null">
        login_out,
      </if>
      <if test="loginIp != null">
        login_ip,
      </if>
      <if test="loginStatus != null">
        login_status,
      </if>
      <if test="blank1 != null">
        blank_1,
      </if>
      <if test="blank2 != null">
        blank_2,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="loginId != null">
        #{loginId,jdbcType=INTEGER},
      </if>
      <if test="custId != null">
        #{custId,jdbcType=INTEGER},
      </if>
      <if test="loginType != null">
        #{loginType,jdbcType=INTEGER},
      </if>
      <if test="loginTime != null">
        #{loginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="loginOut != null">
        #{loginOut,jdbcType=TIMESTAMP},
      </if>
      <if test="loginIp != null">
        #{loginIp,jdbcType=VARCHAR},
      </if>
      <if test="loginStatus != null">
        #{loginStatus,jdbcType=INTEGER},
      </if>
      <if test="blank1 != null">
        #{blank1,jdbcType=VARCHAR},
      </if>
      <if test="blank2 != null">
        #{blank2,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fm.entity.CustLoginExample" resultType="java.lang.Long">
    select count(*) from cust_login
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update cust_login
    <set>
      <if test="record.loginId != null">
        login_id = #{record.loginId,jdbcType=INTEGER},
      </if>
      <if test="record.custId != null">
        cust_id = #{record.custId,jdbcType=INTEGER},
      </if>
      <if test="record.loginType != null">
        login_type = #{record.loginType,jdbcType=INTEGER},
      </if>
      <if test="record.loginTime != null">
        login_time = #{record.loginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.loginOut != null">
        login_out = #{record.loginOut,jdbcType=TIMESTAMP},
      </if>
      <if test="record.loginIp != null">
        login_ip = #{record.loginIp,jdbcType=VARCHAR},
      </if>
      <if test="record.loginStatus != null">
        login_status = #{record.loginStatus,jdbcType=INTEGER},
      </if>
      <if test="record.blank1 != null">
        blank_1 = #{record.blank1,jdbcType=VARCHAR},
      </if>
      <if test="record.blank2 != null">
        blank_2 = #{record.blank2,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update cust_login
    set login_id = #{record.loginId,jdbcType=INTEGER},
      cust_id = #{record.custId,jdbcType=INTEGER},
      login_type = #{record.loginType,jdbcType=INTEGER},
      login_time = #{record.loginTime,jdbcType=TIMESTAMP},
      login_out = #{record.loginOut,jdbcType=TIMESTAMP},
      login_ip = #{record.loginIp,jdbcType=VARCHAR},
      login_status = #{record.loginStatus,jdbcType=INTEGER},
      blank_1 = #{record.blank1,jdbcType=VARCHAR},
      blank_2 = #{record.blank2,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fm.entity.CustLogin">
    update cust_login
    <set>
      <if test="custId != null">
        cust_id = #{custId,jdbcType=INTEGER},
      </if>
      <if test="loginType != null">
        login_type = #{loginType,jdbcType=INTEGER},
      </if>
      <if test="loginTime != null">
        login_time = #{loginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="loginOut != null">
        login_out = #{loginOut,jdbcType=TIMESTAMP},
      </if>
      <if test="loginIp != null">
        login_ip = #{loginIp,jdbcType=VARCHAR},
      </if>
      <if test="loginStatus != null">
        login_status = #{loginStatus,jdbcType=INTEGER},
      </if>
      <if test="blank1 != null">
        blank_1 = #{blank1,jdbcType=VARCHAR},
      </if>
      <if test="blank2 != null">
        blank_2 = #{blank2,jdbcType=VARCHAR},
      </if>
    </set>
    where login_id = #{loginId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fm.entity.CustLogin">
    update cust_login
    set cust_id = #{custId,jdbcType=INTEGER},
      login_type = #{loginType,jdbcType=INTEGER},
      login_time = #{loginTime,jdbcType=TIMESTAMP},
      login_out = #{loginOut,jdbcType=TIMESTAMP},
      login_ip = #{loginIp,jdbcType=VARCHAR},
      login_status = #{loginStatus,jdbcType=INTEGER},
      blank_1 = #{blank1,jdbcType=VARCHAR},
      blank_2 = #{blank2,jdbcType=VARCHAR}
    where login_id = #{loginId,jdbcType=INTEGER}
  </update>
</mapper>